/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * dominoUI.java
 *
 * Created on 29 бер 2010, 21:52:08
 */

package my.domino;

import java.awt.Point;

/**
 *
 * @author Администратор
 */
public class dominoUI extends javax.swing.JFrame {

    /** Creates new form dominoUI */
    public dominoUI() {
        initComponents();
        PlayerPanel.string = "";
        this.gameSettings = new CGameSettings();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        PlayerPanel = new my.domino.CPlayerPanel();
        CPUPanel1 = new my.domino.CCPUPanel("CPU1", false);
        CPUPanel2 = new my.domino.CCPUPanel("CPU2", true);
        CPUPanel3 = new my.domino.CCPUPanel("CPU3", false);
        GameFieldPanel = new my.domino.CGameFieldPanel();
        GraveyardPanel = new my.domino.CGraveyardPanel();
        ScorePanel = new my.domino.CScorePanel();
        MenuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuNew = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(640, 480));
        setName("mainForm"); // NOI18N
        setResizable(false);

        MainPanel.setBackground(new java.awt.Color(255, 255, 255));
        MainPanel.setName("mainPanel"); // NOI18N
        MainPanel.setPreferredSize(new java.awt.Dimension(640, 459));
        MainPanel.setLayout(null);

        PlayerPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PlayerPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PlayerPanelLayout = new javax.swing.GroupLayout(PlayerPanel);
        PlayerPanel.setLayout(PlayerPanelLayout);
        PlayerPanelLayout.setHorizontalGroup(
            PlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        PlayerPanelLayout.setVerticalGroup(
            PlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        MainPanel.add(PlayerPanel);
        PlayerPanel.setBounds(0, 370, 380, 100);

        javax.swing.GroupLayout CPUPanel1Layout = new javax.swing.GroupLayout(CPUPanel1);
        CPUPanel1.setLayout(CPUPanel1Layout);
        CPUPanel1Layout.setHorizontalGroup(
            CPUPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );
        CPUPanel1Layout.setVerticalGroup(
            CPUPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        MainPanel.add(CPUPanel1);
        CPUPanel1.setBounds(0, 0, 160, 100);

        javax.swing.GroupLayout CPUPanel2Layout = new javax.swing.GroupLayout(CPUPanel2);
        CPUPanel2.setLayout(CPUPanel2Layout);
        CPUPanel2Layout.setHorizontalGroup(
            CPUPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );
        CPUPanel2Layout.setVerticalGroup(
            CPUPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        MainPanel.add(CPUPanel2);
        CPUPanel2.setBounds(160, 0, 160, 100);

        javax.swing.GroupLayout CPUPanel3Layout = new javax.swing.GroupLayout(CPUPanel3);
        CPUPanel3.setLayout(CPUPanel3Layout);
        CPUPanel3Layout.setHorizontalGroup(
            CPUPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );
        CPUPanel3Layout.setVerticalGroup(
            CPUPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        MainPanel.add(CPUPanel3);
        CPUPanel3.setBounds(320, 0, 160, 100);

        javax.swing.GroupLayout GameFieldPanelLayout = new javax.swing.GroupLayout(GameFieldPanel);
        GameFieldPanel.setLayout(GameFieldPanelLayout);
        GameFieldPanelLayout.setHorizontalGroup(
            GameFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        GameFieldPanelLayout.setVerticalGroup(
            GameFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );

        MainPanel.add(GameFieldPanel);
        GameFieldPanel.setBounds(0, 100, 480, 270);

        GraveyardPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GraveyardPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout GraveyardPanelLayout = new javax.swing.GroupLayout(GraveyardPanel);
        GraveyardPanel.setLayout(GraveyardPanelLayout);
        GraveyardPanelLayout.setHorizontalGroup(
            GraveyardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        GraveyardPanelLayout.setVerticalGroup(
            GraveyardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        MainPanel.add(GraveyardPanel);
        GraveyardPanel.setBounds(380, 370, 100, 100);

        ScorePanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout ScorePanelLayout = new javax.swing.GroupLayout(ScorePanel);
        ScorePanel.setLayout(ScorePanelLayout);
        ScorePanelLayout.setHorizontalGroup(
            ScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );
        ScorePanelLayout.setVerticalGroup(
            ScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
        );

        MainPanel.add(ScorePanel);
        ScorePanel.setBounds(480, 0, 170, 470);

        menuFile.setText("File");

        menuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNew.setText("New...");
        menuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewActionPerformed(evt);
            }
        });
        menuFile.add(menuNew);
        menuFile.add(jSeparator1);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        MenuBar.add(menuFile);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void PlayerPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PlayerPanelMouseClicked
        if(evt.getButton()==1)
        {
            this.point = evt.getPoint();
 
            if(this.point.y >= 30 && this.point.y <= 74)
            {
                this.num = ((this.point.x-20)/25);
                if(this.point.x >= 20+this.num*25 && this.point.x <= 20+this.num*25+20 && this.num < this.PlayerPanel.hand.getCount())
                {
                    if(this.GameFieldPanel.gamefield.canMove(this.GameFieldPanel.deck.getBone(this.PlayerPanel.hand.showBone(this.num))))
                    {
                        this.GameFieldPanel.gamefield.makeMove(this.GameFieldPanel.deck.getBone(this.PlayerPanel.hand.showBone(this.num)), this.PlayerPanel.hand.getBone(this.num), true);
                        PlayerPanel.repaint();
                        this.GameFieldPanel.repaint();
                        
                        if(this.PlayerPanel.hand.getCount() == 0 || this.fish())
                        {
                            if(this.calculateScores())
                            {
                                this.showWinner(this.ScorePanel.score.getName(0), this.ScorePanel.score.getNameByPosition(0));
                            }
                            else
                            {
                                if(this.fish())
                                {
                                    this.showWinner("", "");
                                }
                                else
                                {
                                    this.showWinner(this.ScorePanel.score.getName(0), "");
                                }
                            }
                        }
                        else
                        {
                            this.opponentsMove();
                        }
                    }
                }

                PlayerPanel.repaint();
            }
        }
    }//GEN-LAST:event_PlayerPanelMouseClicked

    private void GraveyardPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GraveyardPanelMouseClicked
        if(evt.getButton()==1)
        {
            if(!this.PlayerPanel.hand.canMoves(this.GameFieldPanel.deck, this.GameFieldPanel.gamefield.getNum(0), this.GameFieldPanel.gamefield.getNum(1)) && this.gameSettings.isGameStarted())
            {
                if(this.GraveyardPanel.graveyard.getCount()>0)
                {
                    this.GameFieldPanel.gamefield.setDialogPosition(this.getX()+this.getWidth()/2, this.getY()+this.getHeight()/2);
                    this.PlayerPanel.hand.putBone(this.GraveyardPanel.graveyard.getBone());
                }
                else
                {
                    this.opponentsMove();
                }

                this.PlayerPanel.repaint();
                this.GraveyardPanel.repaint();
            }
        }
    }//GEN-LAST:event_GraveyardPanelMouseClicked

    private void menuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewActionPerformed
        this.startGame();
    }//GEN-LAST:event_menuNewActionPerformed

    public void opponentsMove()
    {
        this.cpuMove(CPUPanel1);
        this.GameFieldPanel.repaint();
        this.GraveyardPanel.repaint();
        this.CPUPanel1.repaint();
        if(this.CPUPanel1.cpu.getCount() == 0 || this.fish())
        {
            if(this.calculateScores())
            {
                this.showWinner(this.ScorePanel.score.getName(1), this.ScorePanel.score.getNameByPosition(0));
            }
            else
            {
                if(this.fish())
                {
                    this.showWinner("", "");
                }
                else
                {
                    this.showWinner(this.ScorePanel.score.getName(1), "");
                }
            }
        }
        else
        {
            this.cpuMove(CPUPanel2);
            this.GameFieldPanel.repaint();
            this.GraveyardPanel.repaint();
            this.CPUPanel2.repaint();
            if(this.CPUPanel2.cpu.getCount() == 0 || this.fish())
            {
                if(this.calculateScores())
                {
                    this.showWinner(this.ScorePanel.score.getName(2), this.ScorePanel.score.getNameByPosition(0));
                }
                else
                {
                    if(this.fish())
                    {
                        this.showWinner("", "");
                    }
                    else
                    {
                        this.showWinner(this.ScorePanel.score.getName(2), "");
                    }
                }
            }
            else
            {
                this.cpuMove(CPUPanel3);
                this.GameFieldPanel.repaint();
                this.GraveyardPanel.repaint();
                this.CPUPanel3.repaint();
                if(this.CPUPanel3.cpu.getCount() == 0 || this.fish())
                {
                    if(this.calculateScores())
                    {
                        this.showWinner(this.ScorePanel.score.getName(3), this.ScorePanel.score.getNameByPosition(0));
                    }
                    else
                    {
                        if(this.fish())
                        {
                            this.showWinner("", "");
                        }
                        else
                        {
                            this.showWinner(this.ScorePanel.score.getName(3), "");
                        }
                    }
                }
            }
        }
    }

    public void startGame()
    {
        if(newGameDialog==null)
            newGameDialog = new DNewGame();

        this.newGameDialog.setPlayerName(this.gameSettings.getPlayerName());
        this.newGameDialog.setCPU1Name(this.gameSettings.getCPU1Name());
        this.newGameDialog.setCPU2Name(this.gameSettings.getCPU2Name());
        this.newGameDialog.setCPU3Name(this.gameSettings.getCPU3Name());
        this.newGameDialog.setPlayerTeamName(this.gameSettings.getPlayerTeamName());
        this.newGameDialog.setEnemyTeamName(this.gameSettings.getEnemyTeamName());
        this.newGameDialog.setMaxScore(this.gameSettings.getMaxScore());
        this.newGameDialog.setDifficulty(this.gameSettings.getDifficulty());
        this.newGameDialog.setGameType(this.gameSettings.isGameTypeDraw());
        
        this.gameSettings = newGameDialog.showDialog(this);
        this.CPUPanel1.cpu.setName(this.gameSettings.getCPU1Name());
        this.CPUPanel2.cpu.setName(this.gameSettings.getCPU2Name());
        this.CPUPanel3.cpu.setName(this.gameSettings.getCPU3Name());
        this.ScorePanel.score.setName(0, this.gameSettings.getPlayerName());
        this.ScorePanel.score.setName(1, this.gameSettings.getCPU1Name());
        this.ScorePanel.score.setName(2, this.gameSettings.getCPU2Name());
        this.ScorePanel.score.setName(3, this.gameSettings.getCPU3Name());
        this.ScorePanel.score.setMaxScore(this.gameSettings.getMaxScore());
        this.gameSettings.startGame();

        if(this.gameSettings.getOK())
            this.newRound();
    }

    public void endGame()
    {
        this.gameSettings.endGame();
        this.GameFieldPanel.deck.Shuffle();
        this.GameFieldPanel.gamefield.emptyGameField();
        this.PlayerPanel.hand.emptyHand();
        this.CPUPanel1.cpu.emptyHand();
        this.CPUPanel2.cpu.emptyHand();
        this.CPUPanel3.cpu.emptyHand();
        this.GraveyardPanel.graveyard.emptyGraveyard();

        this.GameFieldPanel.repaint();
        this.PlayerPanel.repaint();
        this.CPUPanel1.repaint();
        this.CPUPanel2.repaint();
        this.CPUPanel3.repaint();
        this.GraveyardPanel.repaint();
    }
    
    public void newRound()
    {
        this.GameFieldPanel.deck.Shuffle();
        this.GameFieldPanel.gamefield.emptyGameField();
        this.PlayerPanel.hand.emptyHand();
        this.CPUPanel1.cpu.emptyHand();
        this.CPUPanel2.cpu.emptyHand();
        this.CPUPanel3.cpu.emptyHand();
        this.GraveyardPanel.graveyard.emptyGraveyard();
        
        for(int i=0;i<5;i++)
        {
            this.PlayerPanel.hand.putBone(i);
        }
        for(int i=5;i<10;i++)
        {
            this.CPUPanel1.cpu.putBone(i);
        }
        for(int i=10;i<15;i++)
        {
            this.CPUPanel2.cpu.putBone(i);
        }
        for(int i=15;i<20;i++)
        {
            this.CPUPanel3.cpu.putBone(i);
        }
        
        if(this.gameSettings.isGameTypeDraw())
        {
            for(int i=20;i<28;i++)
                this.GraveyardPanel.graveyard.putBone(i);
        }

        this.PlayerPanel.setDeck(this.GameFieldPanel.deck);
        int doubleSize = -1;
        int doublePlayer = -1;
        int doubleNum = -1;
        int score = -1;
        int scorePlayer = -1;
        int scoreNum = -1;
        if((this.num = this.PlayerPanel.hand.getBiggestDouble(this.GameFieldPanel.deck))!=-1)
        {
            if(doubleSize < this.GameFieldPanel.deck.getBone(this.num).getUp())
            {
                doubleSize = this.GameFieldPanel.deck.getBone(this.num).getUp();
                doublePlayer = 0;
                doubleNum = this.num;
            }
        }
        else
        {
            this.num = this.PlayerPanel.hand.getBiggestScore(this.GameFieldPanel.deck);
            if(score < this.GameFieldPanel.deck.getBone(this.num).getUp() + this.GameFieldPanel.deck.getBone(this.num).getDown())
            {
                score = this.GameFieldPanel.deck.getBone(this.num).getUp() + this.GameFieldPanel.deck.getBone(this.num).getDown();
                scorePlayer = 0;
                scoreNum = this.num;
            }
        }
        if((this.num = this.CPUPanel1.cpu.getBiggestDouble(this.GameFieldPanel.deck))!=-1)
        {
            if(doubleSize < this.GameFieldPanel.deck.getBone(this.num).getUp())
            {
                doubleSize = this.GameFieldPanel.deck.getBone(this.num).getUp();
                doublePlayer = 1;
                doubleNum = this.num;
            }
        }
        else
        {
            this.num = this.CPUPanel1.cpu.getBiggestScore(this.GameFieldPanel.deck);
            if(score < this.GameFieldPanel.deck.getBone(this.num).getUp() + this.GameFieldPanel.deck.getBone(this.num).getDown())
            {
                score = this.GameFieldPanel.deck.getBone(this.num).getUp() + this.GameFieldPanel.deck.getBone(this.num).getDown();
                scorePlayer = 1;
                scoreNum = this.num;
            }
        }
        if((this.num = this.CPUPanel2.cpu.getBiggestDouble(this.GameFieldPanel.deck))!=-1)
        {
            if(doubleSize < this.GameFieldPanel.deck.getBone(this.num).getUp())
            {
                doubleSize = this.GameFieldPanel.deck.getBone(this.num).getUp();
                doublePlayer = 2;
                doubleNum = this.num;
            }
        }
        else
        {
            this.num = this.CPUPanel2.cpu.getBiggestScore(this.GameFieldPanel.deck);
            if(score < this.GameFieldPanel.deck.getBone(this.num).getUp() + this.GameFieldPanel.deck.getBone(this.num).getDown())
            {
                score = this.GameFieldPanel.deck.getBone(this.num).getUp() + this.GameFieldPanel.deck.getBone(this.num).getDown();
                scorePlayer = 2;
                scoreNum = this.num;
            }
        }
        if((this.num = this.CPUPanel3.cpu.getBiggestDouble(this.GameFieldPanel.deck))!=-1)
        {
            if(doubleSize < this.GameFieldPanel.deck.getBone(this.num).getUp())
            {
                doubleSize = this.GameFieldPanel.deck.getBone(this.num).getUp();
                doublePlayer = 3;
                doubleNum = this.num;
            }
        }
        else
        {
            this.num = this.CPUPanel3.cpu.getBiggestScore(this.GameFieldPanel.deck);
            if(score < this.GameFieldPanel.deck.getBone(this.num).getUp() + this.GameFieldPanel.deck.getBone(this.num).getDown())
            {
                score = this.GameFieldPanel.deck.getBone(this.num).getUp() + this.GameFieldPanel.deck.getBone(this.num).getDown();
                scorePlayer = 3;
                scoreNum = this.num;
            }
        }

        int up = 0;
        int down = 0;
        switch(doublePlayer)
        {
            case 0:
                up = this.GameFieldPanel.deck.getBone(this.PlayerPanel.hand.showBone(doubleNum)).getUp();
                down = this.GameFieldPanel.deck.getBone(this.PlayerPanel.hand.showBone(doubleNum)).getDown();
                this.GameFieldPanel.gamefield.makeFirstMove(this.PlayerPanel.hand.getBone(doubleNum), up, down);
                this.cpuMove(CPUPanel1);
                this.cpuMove(CPUPanel2);
                this.cpuMove(CPUPanel3);
            break;
            case 1:
                up = this.GameFieldPanel.deck.getBone(this.CPUPanel1.cpu.showBone(doubleNum)).getUp();
                down = this.GameFieldPanel.deck.getBone(this.CPUPanel1.cpu.showBone(doubleNum)).getDown();
                this.GameFieldPanel.gamefield.makeFirstMove(this.CPUPanel1.cpu.getBone(doubleNum), up, down);
                this.cpuMove(CPUPanel2);
                this.cpuMove(CPUPanel3);
            break;
            case 2:
                up = this.GameFieldPanel.deck.getBone(this.CPUPanel2.cpu.showBone(doubleNum)).getUp();
                down = this.GameFieldPanel.deck.getBone(this.CPUPanel2.cpu.showBone(doubleNum)).getDown();
                this.GameFieldPanel.gamefield.makeFirstMove(this.CPUPanel2.cpu.getBone(doubleNum), up, down);
                this.cpuMove(CPUPanel3);
            break;
            case 3:
                up = this.GameFieldPanel.deck.getBone(this.CPUPanel3.cpu.showBone(doubleNum)).getUp();
                down = this.GameFieldPanel.deck.getBone(this.CPUPanel3.cpu.showBone(doubleNum)).getDown();
                this.GameFieldPanel.gamefield.makeFirstMove(this.CPUPanel3.cpu.getBone(doubleNum), up, down);
            break;
            default:
                switch(scorePlayer)
                {
                    case 0:
                        up = this.GameFieldPanel.deck.getBone(this.PlayerPanel.hand.showBone(scoreNum)).getUp();
                        down = this.GameFieldPanel.deck.getBone(this.PlayerPanel.hand.showBone(scoreNum)).getDown();
                        this.GameFieldPanel.gamefield.makeFirstMove(this.PlayerPanel.hand.getBone(scoreNum), up, down);
                        this.cpuMove(CPUPanel1);
                        this.cpuMove(CPUPanel2);
                        this.cpuMove(CPUPanel3);
                    break;
                    case 1:
                        up = this.GameFieldPanel.deck.getBone(this.CPUPanel1.cpu.showBone(scoreNum)).getUp();
                        down = this.GameFieldPanel.deck.getBone(this.CPUPanel1.cpu.showBone(scoreNum)).getDown();
                        this.GameFieldPanel.gamefield.makeFirstMove(this.CPUPanel1.cpu.getBone(scoreNum), up, down);
                        this.cpuMove(CPUPanel2);
                        this.cpuMove(CPUPanel3);
                    break;
                    case 2:
                        up = this.GameFieldPanel.deck.getBone(this.CPUPanel2.cpu.showBone(scoreNum)).getUp();
                        down = this.GameFieldPanel.deck.getBone(this.CPUPanel2.cpu.showBone(scoreNum)).getDown();
                        this.GameFieldPanel.gamefield.makeFirstMove(this.CPUPanel2.cpu.getBone(scoreNum), up, down);
                        this.cpuMove(CPUPanel3);
                    break;
                    case 3:
                        up = this.GameFieldPanel.deck.getBone(this.CPUPanel3.cpu.showBone(scoreNum)).getUp();
                        down = this.GameFieldPanel.deck.getBone(this.CPUPanel3.cpu.showBone(scoreNum)).getDown();
                        this.GameFieldPanel.gamefield.makeFirstMove(this.CPUPanel3.cpu.getBone(scoreNum), up, down);
                    break;
                }
        }

        this.GameFieldPanel.repaint();
        this.PlayerPanel.repaint();
        this.CPUPanel1.repaint();
        this.CPUPanel2.repaint();
        this.CPUPanel3.repaint();
        this.GraveyardPanel.repaint();
        this.ScorePanel.repaint();
    }

    public void cpuMove(CCPUPanel panel)
    {
        while((this.num = panel.cpu.makeMove(this.GameFieldPanel.deck, this.GameFieldPanel.gamefield.getNum(0), this.GameFieldPanel.gamefield.getNum(1)))==-1
               && this.GraveyardPanel.graveyard.getCount()>0)
            panel.cpu.putBone(this.GraveyardPanel.graveyard.getBone());
        if(this.num != -1)
        {
            this.GameFieldPanel.gamefield.makeMove(this.GameFieldPanel.deck.getBone(this.num), this.num, false);
            panel.repaint();
        }
    }

    public boolean calculateScores()
    {
        this.ScorePanel.repaint();

        this.ScorePanel.score.addPlayerTeamScore(this.PlayerPanel.hand.getScores(this.GameFieldPanel.deck) +
                                                 this.CPUPanel2.cpu.getScores(this.GameFieldPanel.deck));
        this.ScorePanel.score.addEnemyTeamScore(this.CPUPanel1.cpu.getScores(this.GameFieldPanel.deck) +
                                                 this.CPUPanel3.cpu.getScores(this.GameFieldPanel.deck));

        return (this.ScorePanel.score.addScore(0, this.PlayerPanel.hand.getScores(this.GameFieldPanel.deck))
           || this.ScorePanel.score.addScore(1, this.CPUPanel1.cpu.getScores(this.GameFieldPanel.deck))
           || this.ScorePanel.score.addScore(2, this.CPUPanel2.cpu.getScores(this.GameFieldPanel.deck))
           || this.ScorePanel.score.addScore(3, this.CPUPanel3.cpu.getScores(this.GameFieldPanel.deck)));
    }

    public boolean fish()
    {
        return (this.GraveyardPanel.graveyard.getCount() == 0)
               && !this.PlayerPanel.hand.canMoves(this.GameFieldPanel.deck, this.GameFieldPanel.gamefield.getNum(0), this.GameFieldPanel.gamefield.getNum(1))
               && !this.CPUPanel1.cpu.canMoves(this.GameFieldPanel.deck, this.GameFieldPanel.gamefield.getNum(0), this.GameFieldPanel.gamefield.getNum(1))
               && !this.CPUPanel2.cpu.canMoves(this.GameFieldPanel.deck, this.GameFieldPanel.gamefield.getNum(0), this.GameFieldPanel.gamefield.getNum(1))
               && !this.CPUPanel3.cpu.canMoves(this.GameFieldPanel.deck, this.GameFieldPanel.gamefield.getNum(0), this.GameFieldPanel.gamefield.getNum(1));
    }

    public void showWinner(String winner, String winner_game)
    {
        if(winnerDialog==null)
            winnerDialog= new DShowWinner();

        winnerDialog.setNames(this.ScorePanel.score.getName(0), this.ScorePanel.score.getName(1), this.ScorePanel.score.getName(2), this.ScorePanel.score.getName(3));
        winnerDialog.setScores(this.PlayerPanel.hand.getScores(this.GameFieldPanel.deck),
                               this.CPUPanel1.cpu.getScores(this.GameFieldPanel.deck),
                               this.CPUPanel2.cpu.getScores(this.GameFieldPanel.deck),
                               this.CPUPanel3.cpu.getScores(this.GameFieldPanel.deck));
        winnerDialog.setWinner(winner, winner_game);
        winnerDialog.setText();
        if(winner_game.length() != 0)
        {
            if(winnerDialog.showDialog(this, true))
            {
                this.endGame();
            }
        }
        else
        {
            if(winnerDialog.showDialog(this, false))
            {
                this.newRound();
            }
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dominoUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private my.domino.CCPUPanel CPUPanel1;
    private my.domino.CCPUPanel CPUPanel2;
    private my.domino.CCPUPanel CPUPanel3;
    private my.domino.CGameFieldPanel GameFieldPanel;
    private my.domino.CGraveyardPanel GraveyardPanel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JMenuBar MenuBar;
    private my.domino.CPlayerPanel PlayerPanel;
    private my.domino.CScorePanel ScorePanel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuNew;
    // End of variables declaration//GEN-END:variables
    private Point point;
    private int num;
    private DShowWinner winnerDialog;
    private DNewGame newGameDialog;
    private CGameSettings gameSettings;
}
